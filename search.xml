<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cmd入门 - 1</title>
      <link href="/2021/12/02/cmd%E5%85%A5%E9%97%A8-1/"/>
      <url>/2021/12/02/cmd%E5%85%A5%E9%97%A8-1/</url>
      
        <content type="html"><![CDATA[<p>经常在不同地方都能看到.bat的批处理文件，自己也从网上下载并使用过一些。没记错的话，几年前自己还学着写过简单的bat文件来处理图片的命名和复制之类的操作。</p><p>终于决定养成习惯整理下自己学习的技术知识，以期能沉淀下来并且温故知新，帮助自己的技术水平提升。那么借此机会，学习整理下自己可能会用到的批处理常用命令。</p><p>最后，因为搭建了这个博客，常用git上传，总是<code>add+commit+push</code>三连发也觉得颇无趣，不如编写个上传的bat文件，包含更新发布的<code>hexo</code>命令，每次执行一下替代重复劳动。</p><ol><li><h5 id="look-bat：-查看效果"><a href="#look-bat：-查看效果" class="headerlink" title="look.bat： 查看效果"></a>look.bat： 查看效果</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">call hexo g</span><br><span class="line">call hexo s</span><br></pre></td></tr></table></figure><ol start="2"><li><h5 id="deploy-bat-上传到github仓库"><a href="#deploy-bat-上传到github仓库" class="headerlink" title="deploy.bat: 上传到github仓库"></a>deploy.bat: 上传到github仓库</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">call hexo g</span><br><span class="line">echo Posts generated and renewed!</span><br><span class="line">call cd ./public/</span><br><span class="line">call git add --all</span><br><span class="line">echo on</span><br><span class="line">call git commit -m &quot;new post:  %date%&quot;</span><br><span class="line">call git push -u origin</span><br></pre></td></tr></table></figure><ol start="3"><li><h5 id="newone-bat：创建新的post并打开"><a href="#newone-bat：创建新的post并打开" class="headerlink" title="newone.bat：创建新的post并打开"></a>newone.bat：创建新的post并打开</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set /p name=input name:</span><br><span class="line">echo name:%name%</span><br><span class="line">echo please wait</span><br><span class="line">call hexo new post %name%</span><br><span class="line">start /d &quot;C:\Program Files\Typora&quot; typora.exe &quot;E:\Blog\Hexo-blog\source\_posts\%name%.md&quot;</span><br></pre></td></tr></table></figure><p>效果还行，学习了下<code>echo</code>的基本操作，熟悉了下<code>call</code>,<code>date</code>,<code>start</code>等命令。</p><p>PS</p><p>记录下遇到的一个有趣问题（被解决了的才能被称为有趣:joy::joy:）</p><p>PPS</p><p>刚发现markdown支持颜文字哈</p><p><code>:scream:</code>是:scream:<br><code>:kissing_heart:</code>是:kissing_heart:<br><code>:yum:</code>是:yum:</p><p><img src="https://img-blog.csdn.net/20181007202942931?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzOTgyMjMy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="截图"></p><hr><p>关于后续的cmd命令学习，找了几篇总结的比较全的博客，记录如下。</p><p><a href="https://www.cnblogs.com/lsgxeva/p/10694546.html">Windows批处理(cmd/bat)常用命令小结 - lsgxeva - 博客园 (cnblogs.com)</a></p><p><a href="http://xstarcd.github.io/wiki/windows/windows_cmd_summary_commands.html">批处理常用命令总结 - 批处理命令简介 (xstarcd.github.io)</a></p><p><a href="https://blog.csdn.net/weixin_30411819/article/details/96188519">cmd 与 bash 基础命令入门_weixin_30411819的博客-CSDN博客</a></p><p><a href="http://www.360doc.com/content/18/0319/21/11935121_738543065.shtml">shell脚本和批处理脚本有什么区别？ (360doc.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash入门 - 1</title>
      <link href="/2021/12/02/bash%E5%85%A5%E9%97%A8-1/"/>
      <url>/2021/12/02/bash%E5%85%A5%E9%97%A8-1/</url>
      
        <content type="html"><![CDATA[<p>bash是较cmd/bat更为强大的脚本shell，考虑之后可能经常和数据库以及类unix系统打交道，提前开始学习，谨以此记。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows CMD, PowerShell, 和 Windows Terminal</title>
      <link href="/2021/12/02/Windows%20CMD%20%E5%92%8C%20PowerShell/"/>
      <url>/2021/12/02/Windows%20CMD%20%E5%92%8C%20PowerShell/</url>
      
        <content type="html"><![CDATA[<h3 id="Windows-CMD和PowerShell区别"><a href="#Windows-CMD和PowerShell区别" class="headerlink" title="Windows CMD和PowerShell区别"></a>Windows CMD和PowerShell区别</h3><ul><li>PowerShell是CMD的超集；</li><li>PowerShell使用命令集合为cmdlet，同时包含CMD命令</li><li>Windows命令不区分大小写</li><li>都可以集成在Windows Terminal里，包括WSL以及Anaconda等其他命令行</li></ul><hr><h3 id="CMD常用命令集合"><a href="#CMD常用命令集合" class="headerlink" title="CMD常用命令集合"></a>CMD常用命令集合</h3><blockquote><p>dir</p><p>mkdir</p><p>cd</p><p>notepad：记事本</p><p>write: 写字板</p><p>“cmd” + /?</p><p>rename</p><p>chdir：当前路径</p></blockquote><p><strong>1、ping 命令：</strong>用来验证与远程计算机的连接。</p><p>ping 是Windows自带的一个DOS命令。利用它可以检查网络是否能够连通和分析网络速度，用好它可以很好地帮助我们分析判定网络故障</p><blockquote><p>语法：ping   [选项]  [主机名称或IP地址]</p></blockquote><p><strong>2、用命令查看和终止进程</strong></p><p>netstat命令：显示协议统计信息和当前 TCP/IP 网络连接</p><blockquote><p>语法：netstat  [选项] </p></blockquote><p><strong>3 、taskkill命令：按照进程 ID (PID) 或映像名称终止任务。</strong></p><blockquote><p> 语法：taskkill   [选项]</p><p>常用参数：</p><p> /F            指定要强行终止<br> /T            Tree kill: 终止指定的进程和任何由此启动的子进程。<br>/IM           image name  指定要终止的进程的名称。<br>/PID         process id       指定要终止的进程的PID。  </p></blockquote><hr><h3 id="PowerShell常用命令集合"><a href="#PowerShell常用命令集合" class="headerlink" title="PowerShell常用命令集合"></a>PowerShell常用命令集合</h3><blockquote><p>ls  -a（隐藏）, -l（详细）, -al</p><p>pwd：当前路径</p><p>get-help </p><p>new-item</p><p>rename-item “name.type” “new name.type”</p><p>get-alias</p><p>explorer</p><p>get-help/help + “cmd”</p></blockquote><hr><h3 id="Windows-Terminal常用快捷键集合"><a href="#Windows-Terminal常用快捷键集合" class="headerlink" title="Windows Terminal常用快捷键集合"></a>Windows Terminal常用快捷键集合</h3><blockquote><p>Ctrl + Shift + PgUp/PgDown： 向上/向下滚动</p><p>Ctrl + Shift + T: 打开新的标签页</p><p>Ctrl + Shift + W: 关闭新的标签页</p><p>exit： 推出当前标签页</p><p>Ctrl + +/-： 字体放大/缩小</p></blockquote><hr><h3 id="Windows常用快捷键集合"><a href="#Windows常用快捷键集合" class="headerlink" title="Windows常用快捷键集合"></a>Windows常用快捷键集合</h3><blockquote><p>Win + Ctrl + D 创建虚拟桌面</p><p>Win + Ctrl + F4 关闭当前虚拟桌面</p><p>Win + Ctrl + ← 向左切换虚拟桌面</p><p>Win + Ctrl + → 向右切换虚拟桌面</p><p><strong>Win + Shift + S 召唤Windows截图</strong></p><p><strong>Win+K 打开「连接」设备</strong></p><p>Win + Tab 时间轴</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> CMD </tag>
            
            <tag> PowerShell </tag>
            
            <tag> Terminal </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用命令</title>
      <link href="/2021/12/01/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/12/01/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Github-生成SSH秘钥（详细教程）"><a href="#1-Github-生成SSH秘钥（详细教程）" class="headerlink" title="1. Github 生成SSH秘钥（详细教程）"></a>1. Github 生成SSH秘钥（详细教程）</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>很多朋友在用github管理项目的时候，都是直接使用https url克隆到本地，当然也有有些人使用 SSH url 克隆到本地。然而，为什么绝大多数人会使用https url克隆呢？</p><p>这是因为，使用https url克隆对初学者来说会比较方便，复制https url 然后到 git Bash 里面直接用clone命令克隆到本地就好了。而使用 SSH url 克隆却需要在克隆之前先配置和添加好 SSH key 。</p><p>因此，如果你想要使用 SSH url 克隆的话，你必须是这个项目的拥有者。否则你是无法添加 SSH key 的。</p><h4 id="https-和-SSH-的区别："><a href="#https-和-SSH-的区别：" class="headerlink" title="https 和 SSH 的区别："></a>https 和 SSH 的区别：</h4><p>1、前者可以随意克隆github上的项目，而不管是谁的；而后者则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。</p><p>2、https url 在push的时候是需要验证用户名和密码的；而 SSH 在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</p><h4 id="在-github-上添加-SSH-key-的步骤："><a href="#在-github-上添加-SSH-key-的步骤：" class="headerlink" title="在 github 上添加 SSH key 的步骤："></a>在 github 上添加 SSH key 的步骤：</h4><h5 id="第一步、首先，检查下自己之前有没有已经生成："><a href="#第一步、首先，检查下自己之前有没有已经生成：" class="headerlink" title="第一步、首先，检查下自己之前有没有已经生成："></a>第一步、首先，检查下自己之前有没有已经生成：</h5><p>在开始菜单中打开git下的git bash（当然，在其他目录下打开git bash也是一样的）：<br>然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~/.ssh </span><br><span class="line">1</span><br></pre></td></tr></table></figure><h5 id="第二步、如果能进入到-ssh文件目录下-，则证明，之前生成过-ssh秘钥，可以直接使用里面的秘钥。"><a href="#第二步、如果能进入到-ssh文件目录下-，则证明，之前生成过-ssh秘钥，可以直接使用里面的秘钥。" class="headerlink" title="第二步、如果能进入到.ssh文件目录下 ，则证明，之前生成过.ssh秘钥，可以直接使用里面的秘钥。"></a>第二步、如果能进入到.ssh文件目录下 ，则证明，之前生成过.ssh秘钥，可以直接使用里面的秘钥。</h5><p>如果不能进入到.ssh文件目录下，则：</p><p>检测下自己之前有没有配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.name和git config user.email（直接分别输入这两个命令）</span><br></pre></td></tr></table></figure><p>如果之前没有创建，则执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config –global user.name ‘xxxxx’ </span><br><span class="line">git config –global user.email ‘xxx@xx.xxx’</span><br></pre></td></tr></table></figure><p>生成秘钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C ‘上面的邮箱’</span><br></pre></td></tr></table></figure><p>代码参数含义：</p><blockquote><p>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名</p></blockquote><p>接着按3个回车</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ssh-keygen -t rsa       &lt;== 建立密钥对，-t代表类型，有RSA和DSA两种</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa):   &lt;==密钥文件默认存放位置，按Enter即可</span><br><span class="line">Created directory &#x27;/root/.ssh&#x27;.</span><br><span class="line">Enter passphrase (empty for no passphrase):     &lt;== 输入密钥锁码，或直接按 Enter 留空</span><br><span class="line">Enter same passphrase again:     &lt;== 再输入一遍密钥锁码</span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.    &lt;== 生成的私钥</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.    &lt;== 生成的公钥</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:K1qy928tkk1FUuzQtlZK+poeS67vIgPvHw9lQ+KNuZ4 root@localhost.localdomain</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|           +.    |</span><br><span class="line">|          o * .  |</span><br><span class="line">|        . .O +   |</span><br><span class="line">|       . *. *    |</span><br><span class="line">|        S =+     |</span><br><span class="line">|    .    =...    |</span><br><span class="line">|    .oo =+o+     |</span><br><span class="line">|     ==o+B*o.    |</span><br><span class="line">|    oo.=EXO.     |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"></span><br><span class="line">1234567891011121314151617181920212223</span><br></pre></td></tr></table></figure><p>最后在.ssh目录下(C盘用户文件夹下)得到了两个文件：id_rsa（私有秘钥）和id_rsa.pub（公有密钥）</p><h5 id="第三步、如果想登陆远端，则需要将rsa-pub里的秘钥添加到远端。"><a href="#第三步、如果想登陆远端，则需要将rsa-pub里的秘钥添加到远端。" class="headerlink" title="第三步、如果想登陆远端，则需要将rsa.pub里的秘钥添加到远端。"></a>第三步、如果想登陆远端，则需要将rsa.pub里的秘钥添加到远端。</h5><p>首先，去.ssh目录下找到id_rsa.pub这个文件夹打开复制全部内容。</p><p>接着：</p><p>1.登录GitHub，进入你的Settings<br><img src="https://img-blog.csdnimg.cn/2019061921352777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NDk1MzM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.会看到左边这些目录，点击SSH and GPG keys<br><img src="https://img-blog.csdnimg.cn/20190619213552339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NDk1MzM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.创建New SSH key<br><img src="https://img-blog.csdnimg.cn/20190619213619807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NDk1MzM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.粘贴你的密钥到你key输入框中<br><img src="https://img-blog.csdnimg.cn/20190619213715333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NDk1MzM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5.点击Add SSH key<br>6.再弹出窗口，输入你的GitHub密码，点击确认按钮。<br>7.到此，就大功告成了。</p><h5 id="第四步-测试。"><a href="#第四步-测试。" class="headerlink" title="第四步 测试。"></a>第四步 测试。</h5><p>在命令窗口上输入 ssh -T ssh -T <a href="mailto:git@github.com">git@github.com</a> 按回车键，如看到以下信息，那么就完美了。<br><img src="https://img-blog.csdnimg.cn/20190619221201430.png" alt="在这里插入图片描述"></p><p><em>转自<a href="https://blog.csdn.net/qq_35495339/article/details/92847819">https://blog.csdn.net/qq_35495339/article/details/92847819</a></em></p><hr><h3 id="2-Git-密码缓存"><a href="#2-Git-密码缓存" class="headerlink" title="2. Git 密码缓存"></a>2. Git 密码缓存</h3><p>默认缓存15分钟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper cache</span><br></pre></td></tr></table></figure><p>可以更改默认的密码缓存时限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper &#x27;cache --timeout=3600&#x27;</span><br></pre></td></tr></table></figure><p>存储</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客内容近期规划</title>
      <link href="/2021/12/01/Outline%20today/"/>
      <url>/2021/12/01/Outline%20today/</url>
      
        <content type="html"><![CDATA[<h3 id="今日计划"><a href="#今日计划" class="headerlink" title="今日计划"></a>今日计划</h3><ul><li>完成博客内容和框架搭建：框架内容包括目前研究探索的几个方向；需要及时记录思路、心得、文献、知识的不同方向细分；</li><li>完成计划内容搭建<h4 id="内容具体包括如下几点"><a href="#内容具体包括如下几点" class="headerlink" title="内容具体包括如下几点"></a>内容具体包括如下几点</h4></li><li>非关系型图数据库和关系型图数据库原理、性能和用途比较；</li><li>关系型数据库，尤其时sql、mysql、postgres等原理、性能、用途比较</li><li>图数据库用法总结：安装、创建、driver连接；data science库的安装、文档与使用。</li><li>对于数据库中索引这一概念的总结</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 规划 </tag>
            
            <tag> 小目标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell，Shell script, bash, bat, cmd, 批处理, shellcode 啥啊这都是？</title>
      <link href="/2021/12/01/Shell%20%E6%A6%82%E5%BF%B5%EF%BC%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/12/01/Shell%20%E6%A6%82%E5%BF%B5%EF%BC%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>咱们一条一条过。</p><h5 id="1-Shell"><a href="#1-Shell" class="headerlink" title="1. Shell"></a>1. Shell</h5><p>1.1 什么是shell？<br>   Linux系统的shell作为操作系统的外壳，为用户提供使用操作系统的接口。它是命令语言、命令解释程序及程序设计语言的统称。 </p><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p><p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p><p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p><p>shell充当一个桥梁：</p><ul><li>将使⽤者的命令翻译给核⼼（kernel）处理。</li><li>同时，将核⼼的处理结果翻译给使⽤者。</li></ul><p>1.2 shell的特性</p><ul><li><p>运行程序</p><p> shell类似于一个程序启动器，shell将程序载入内存并运行它们。</p></li><li><p>管理输入和输出</p><p> 使用&lt;、&gt;和|符号可以将输入输出重定向。这样就可以告诉shell将进程的输入和输出连接到一个文件或是其他进程。</p></li><li><p>可编程</p></li></ul><p>1.3 .shell如何运行程序<br>shell用fork建⽴新进程，⽤execv函数簇在新进程中运⾏⽤户指 定的程序，最后shell⽤wait命令等待新进程结束。wait系统调 ⽤同时从内核取得退出状态或者信号序号以告知⼦进程是如何结束的。</p><p>————————————————<br>版权声明：本文为CSDN博主「sky_Mata」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/skyroben/article/details/72229531">https://blog.csdn.net/skyroben/article/details/72229531</a></p><h5 id="2-Shell-脚本"><a href="#2-Shell-脚本" class="headerlink" title="2. Shell 脚本"></a>2. Shell 脚本</h5><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。通过很多的shell命令组合成需要的功能，然后让shell一次性执行完而不必等待一行一行地敲命令，即面向需要<em><strong>批处理</strong></em>的场景。</p><p>业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。</p><p>由于习惯的原因，简洁起见，本文出现的 “shell编程” 都是指 shell 脚本编程，不是指开发 shell 自身。</p><p><em>开发环境</em></p><p>Shell 编程跟 JavaScript、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p><p>Linux 的 Shell 种类众多，常见的有：</p><ul><li>Bourne Shell（/usr/bin/sh或/bin/sh）</li><li>Bourne Again Shell（/bin/bash）</li><li>C Shell（/usr/bin/csh）</li><li>K Shell（/usr/bin/ksh）</li><li>Shell for Root（/sbin/sh）</li><li>……</li></ul><p>其中 Bash，也就是 Bourne Again Shell，由于易用和免费，Bash 在日常工作中被广泛使用。同时，Bash 也是大多数Linux 系统默认的 Shell。</p><p>在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 <strong>#!/bin/sh</strong>，它同样也可以改为 <strong>#!/bin/bash</strong>。**#!** 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</p><p>转自<a href="https://www.runoob.com/linux/linux-shell.html">Shell 教程 | 菜鸟教程 (runoob.com)</a></p><h5 id="3-bash"><a href="#3-bash" class="headerlink" title="3. bash"></a>3. bash</h5><p>存在多种<code>bash</code>的根本原因就在于使用的解释器不同。而解释器的不同，则源于对功能的需要求不同，有的需求场景中需要很轻的解释器，而有的场景则需要更复杂的解释器。通常而言，在 Unix中默认的 shell是 <code>sh</code>，在 linux中默认的 shell是 <code>bash</code>，<code>bash</code> 是基于 Bourne shell，并吸收了 C shell和 K shell的一些特性。<code>bash</code> 完全兼容 <code>sh</code>，也就是说，用 <code>sh</code> 写的脚本可以不加修改的在 <code>bash</code> 中执行。如果想知道你当前的 shell是哪一种的？可以在你的控制台执行这条命令 <code>echo $SHELL</code>。</p><p>不论是 <code>bash</code> 还是 <code>cmd</code> ，我们也通常称它们为“命令行工具”或者是“命令行界面(CLI)”。</p><h5 id="4-cmd，bat"><a href="#4-cmd，bat" class="headerlink" title="4. cmd，bat"></a>4. cmd，bat</h5><p><code>cmd</code>的发展来源于一个古老的概念，即<code>DOS</code>（Disk operating system）磁盘操作系统，<code>DOS</code>是基于命令行工作的，上世纪末曾经风靡一时；而当后来的macos、windows等图形化操作界面出现后，<code>DOS</code>迅速被淘汰。如今，我们在windows系统里看到的<code>cmd</code>应用即是<code>DOS</code>作为一种独立的应用程序存在着，并且功能上也做了相应的精简。通过执行编写的<code>cmd</code>命令，可以提高我们的事务处理效率。将一连串的<code>cmd</code>命令编写在一个脚本里执行，即形成<em>批处理</em>文件。</p><p>事实上，批处理文件起源于<code>DOS</code>时代。</p><blockquote><p><strong>什么是批处理文件？批处理文件的*作用*是什么？</strong><br>批处理文件（Batch File，简称 BAT文件）是一种在DOS 下最常用的可执行文件。它具有灵活的操纵性，可适应各种复杂的计算机操作。所谓的批处理，就是按规定的顺序自动执行若干个指定的DOS命令或程序。即是把原来一个一个执行的命令汇总起来，成批的执行，而程序文件可以移植到其它电脑中运行，因此可以大大节省命令反复输入的繁琐。同时批处理文件还有一些编程的特点，可以通过扩展参数来灵活的控制程序的执行，所以在日常工作中非常实用。</p><p><a href="http://bbs.bathome.net/viewthread.php?tid=20">批处理是什么？能干什么？ - BAT教程&amp;资料 - 批处理之家 批处理_BAT脚本_PowerShell_VBS_CMD_DOS_Perl_Python - Powered by Discuz! (bathome.net)</a></p></blockquote><p>windows下的批处理文件格式有.bat和.cmd，存在区别。</p><ul><li><code>.cmd</code>文件是针对Windows NT系列系统开发的，向后兼容；只能运行在windows的假<code>DOS</code>环境中。</li><li><code>.bat</code>可以运行在所有的<code>DOS</code>系统中。</li></ul><h5 id="5-shellcode"><a href="#5-shellcode" class="headerlink" title="5. shellcode"></a>5. shellcode</h5><p>shellcode直译就是壳代码,更准确的译法是建立壳的代码; 建立起了壳, 就可以通过壳进一步执行所需要的命令; 比如删除文件;</p><p>shellcode 主要出现在网络安全里面,比如病毒造成缓冲区溢出之后执行的嵌入的代码即为shellcode;</p><p>shellcode 一般用c或者汇编编写,除了因为病毒不合适太大之外,还因为比如往往缓冲区溢出能造成的溢出空间并不大,所以必须精悍</p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> windows </tag>
            
            <tag> unix </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关系型数据库简述</title>
      <link href="/2021/12/01/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E8%BF%B0/"/>
      <url>/2021/12/01/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="关系型数据库简述"><a href="#关系型数据库简述" class="headerlink" title="关系型数据库简述"></a>关系型数据库简述</h3><h4 id="关系型数据库的定义"><a href="#关系型数据库的定义" class="headerlink" title="关系型数据库的定义"></a>关系型数据库的定义</h4><h4 id="关系型数据库的种类"><a href="#关系型数据库的种类" class="headerlink" title="关系型数据库的种类"></a>关系型数据库的种类</h4><ul><li>流行程度</li><li>区别</li></ul><h4 id="关系型数据库的应用"><a href="#关系型数据库的应用" class="headerlink" title="关系型数据库的应用"></a>关系型数据库的应用</h4><ul><li>与非关系型数据库比较</li></ul><p>mysql</p><p><a href="https://zhuanlan.zhihu.com/p/43736857">https://zhuanlan.zhihu.com/p/43736857</a></p><p>索引概念</p><p><a href="https://zhuanlan.zhihu.com/p/73204847">https://zhuanlan.zhihu.com/p/73204847</a></p><p>索引 原理</p><p>url<a href="https://www.ituring.com.cn/article/986">https://www.ituring.com.cn/article/986</a></p><h4 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h4><ul><li>原理</li><li>分类</li></ul><p>Neo4j优化</p><p><a href="https://www.zhihu.com/question/45401120">https://www.zhihu.com/question/45401120</a></p><p>安装GDS库</p><p><a href="https://blog.csdn.net/zhaominyiz/article/details/106481736">https://blog.csdn.net/zhaominyiz/article/details/106481736</a></p><p>GDS使用</p><p><a href="https://blog.csdn.net/tiandao451/article/details/106259537">https://blog.csdn.net/tiandao451/article/details/106259537</a></p><p>GDS介绍</p><p><a href="https://blog.csdn.net/qq_41734424/article/details/116146265">https://blog.csdn.net/qq_41734424/article/details/116146265</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 关系型数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>庄子 精读</title>
      <link href="/2021/12/01/%E5%BA%84%E5%AD%90%20-%20%E9%99%88%E5%BC%95%E9%A9%B0%20-%201/"/>
      <url>/2021/12/01/%E5%BA%84%E5%AD%90%20-%20%E9%99%88%E5%BC%95%E9%A9%B0%20-%201/</url>
      
        <content type="html"><![CDATA[<h4 id="关于精读："><a href="#关于精读：" class="headerlink" title="关于精读："></a>关于精读：</h4><p>庄子 - 秋水篇 &lt;- （逍遥+齐物）</p><p>冯友兰 中国哲学史 ：庄子相比老子，多了一层“名学”的思想，齐物论中尤甚。</p><p>先秦时期，“诸子百家、百家争鸣”，不称为“家”，而是只称为“子”；到汉朝才有将老子庄子思想合为道家等言论；</p><p>书要精读，跳读；不同篇章不同重要性、不同质地；如何拆散、把握中心、“八面受敌”；<br>庄子：52篇（汉书）-&gt;33篇，郭象删订。<br>内外杂：内篇7篇，为庄子作，外篇及杂篇由弟子门人伪作。</p><p>提炼核心：仁义内在，性由心显<br>孟子：四端说；心、情，动；性：静</p><h4 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h4><p>生平，公元前200年左右</p><p>庄子-山木：螳螂捕蝉，黄雀在后；-&gt;弟子：蔺且（ju-1）</p><p>少直接回应；多借寓言回应；<br>庄子-山木：衣弊履穿，贫也，非惫也，此所谓非遭时也；…处势不便，未足以逞其能也。今处昏上乱相之间而欲无惫，实可得邪？（前后具有矛盾，认为失控）</p><p>庄子-秋水：惠子（朋友）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Taoism </tag>
            
            <tag> 道家 </tag>
            
            <tag> 庄子 </tag>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术栈</title>
      <link href="/2021/12/01/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
      <url>/2021/12/01/%E6%8A%80%E6%9C%AF%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><h3 id="统计学习方法"><a href="#统计学习方法" class="headerlink" title="统计学习方法"></a>统计学习方法</h3><h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><h3 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h3><h3 id="图数据库"><a href="#图数据库" class="headerlink" title="图数据库"></a>图数据库</h3><h3 id="关系型数据库（MYSQL）"><a href="#关系型数据库（MYSQL）" class="headerlink" title="关系型数据库（MYSQL）"></a>关系型数据库（MYSQL）</h3><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 小目标 </tag>
            
            <tag> 技术贴 </tag>
            
            <tag> 技术栈 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
